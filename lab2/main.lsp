(defun test(f p ans)()
    (cond ((= (apply f p) ans) (format t "Test ~a = ~a [OK]~%" (cons f p) ans))
          (T (format t "Test ~a = ~a [FAIL]~%" (cons f p) ans))
    )
)

(defun fmt(msg val)
    (format t "~a ~a~%" msg val)
)

(defun even(l)
    (cond ((not(listp l)) "ERROR: expected list!") 
        ((null l) T)
        (T (not (even (cdr l))))
    )
)

(defun sum(l)
    (cond ((null l) 0)
          ((numberp (car l)) (+ (car l) (sum (cdr l))))
          ((listp (car l)) (+ (sum (car l)) (sum (cdr l))))
          (T (sum (cdr l)))
    ) 
)

(defun depth(l)
    (cond ((atom l) 0)
          (T (max ( + 1 (depth (car l))) (depth (cdr l))))
    )
)

(defun mx(l)
    (cond ((null (car l) (car l)
          ((atom (car l)) (max (car l) (mx (cdr l))))
          ((listp (car l)) (+ (sum (car l)) (sum (cdr l))))
          (T (sum (cdr l)))
    ) 
)
;(fmt "(even (1 2)) -> " (even '(1 2)))

(test 'sum '((1 2 (3))) 6)
(test 'sum '(((1) 2 3)) 6)
(test 'sum '((1 (2 (3)))) 6)
(test 'depth '((1 (1))) 2)
(test 'depth '(((1) 1)) 2)
